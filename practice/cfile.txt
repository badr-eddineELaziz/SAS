#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<time.h>


static int id_counter = 0;
int complete = 0,incomplete = 0;

typedef struct date{
        int day;
        int month;
        int year;
}date;

typedef struct task{
        int id;
        char title[100];
        char description[300];
        char statue[50];
        date deadline;
        struct task* next;
}task;

int compareDates(const date* date1, const date* date2) {
    if (date1->year < date2->year) {
        return -1;
    } else if (date1->year > date2->year) {
        return 1;
    } else {
        if (date1->month < date2->month) {
            return -1;
        } else if (date1->month > date2->month) {
            return 1;
        } else {
            if (date1->day < date2->day) {
                return -1;
            } else if (date1->day > date2->day) {
                return 1;
            } else {
                return 0;
            }
        }
    }
}

void swapNodes(task** head, task** node1, task** node2) {
    if (*node1 == *node2) {
        return;
    }

    task* prev1 = NULL;
    task* prev2 = NULL;
    task* current = *head;

    while (current != NULL && (current != *node1 && current != *node2)) {
        prev1 = prev2;
        prev2 = current;
        current = current->next;
    }

    if (current != *node1 && current != *node2) {
        return;
    }

    if (prev1 != NULL) {
        prev1->next = *node2;
    } else {
        *head = *node2;
    }

    if (prev2 != NULL) {
        prev2->next = *node1;
    } else {
        *head = *node1;
    }

    task* temp = (*node2)->next;
    (*node2)->next = (*node1)->next;
    (*node1)->next = temp;
}


void addTask(task** tasklist, char* title,char* statue, char* description, date deadline) {
    task* newTask = (task*)malloc(sizeof(task));
    if (newTask == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(1);
    }

    newTask->id = id_counter;id_counter++;
    strncpy(newTask->title, title, sizeof(newTask->title));
    strncpy(newTask->statue, statue, sizeof(newTask->statue));
    strncpy(newTask->description, description, sizeof(newTask->description));
    newTask->deadline = deadline;
    newTask->next = NULL;

    if (*tasklist == NULL) {
        *tasklist = newTask;
    } else {
        task* current = *tasklist;
        while (current->next != NULL) {
            current = current->next;
        }

        current->next = newTask;
    }
}

void deleteTaskByID(task** head, int idToDelete) {
    task* current = *head;
    task* prev = NULL;

    if (current != NULL && current->id == idToDelete) {
        *head = current->next;
        free(current);
        return;
    }

    while (current != NULL && current->id != idToDelete) {
        prev = current;
        current = current->next;
    }

    if (current != NULL) {
        prev->next = current->next;
        free(current);
    }
}
int countTasks(task* tasklist) {
    int count = 0;
    task* current = tasklist;

    while (current != NULL) {
        count++;
        current = current->next;
    }

    return count;
}
void countCompleteAndIncompleteTasks(task* tasklist) {
    task* current = tasklist;

    while (current != NULL) {
        if (strcmp(current->statue,"finalisee") == 0) {
            complete++;
        } else {
            incomplete++;
        }
        current = current->next;
    }
}

task* findTaskByID(task* tasklist, int idToFind) {
    task* current = tasklist;

    while (current != NULL) {
        if (current->id == idToFind) {
            return current;
        }
        current = current->next;
    }

    return NULL;
}

task* findTaskByTitle(task* tasklist, const char* titleToFind) {
    task* current = tasklist;

    while (current != NULL) {
        if (strcmp(current->title, titleToFind) == 0) {
            return current;
        }
        current = current->next;
    }

    return NULL;
}


void printTask(task* t){
    printf("Task ID: %d\n", t->id);
    printf("Title: %s\n", t->title);
    printf("Description: %s\n", t->description);
    printf("Deadline: %02d/%02d/%04d\n", t->deadline.day, t->deadline.month, t->deadline.year);
}

task* SortedListByABC(task* tasklist);

/*task* SortedListByDeadLine(task* tasklist) {
        task* sorted = tasklist;
        task** cursor = &sorted;
        while( *cursor != NULL ){

        }
        printTask(sorted);

        return sorted;
}*/
task* SortedListByDeadLine(task* tasklist) {
    task* sorted = tasklist;
    task* cursor = sorted;
    task* prev = NULL;
    int swapped;

    if (sorted == NULL || sorted->next == NULL) {
        return sorted; // Nothing to sort if the list is empty or has only one element
    }

    do {
        swapped = 0;
        cursor = sorted;
        prev = NULL;

        while (cursor->next != NULL) {
            if (compareDates(&(cursor->deadline), &(cursor->next->deadline)) == -1) {
                // Swap the positions of the two nodes
                task* tmp = cursor->next;
                cursor->next = tmp->next;
                tmp->next = cursor;

                if (prev == NULL) {
                    // Update the head if the first node is being swapped
                    sorted = tmp;
                } else {
                    prev->next = tmp;
                }

                swapped = 1;
            }

            prev = cursor;
            cursor = cursor->next;
        }
    } while (swapped);

    return sorted;
}

void modifyDescription(task* tasklist, int taskId, const char* newDescription) {
    task* current = tasklist;

    while (current != NULL) {
        if (current->id == taskId) {
            strcpy(current->description, newDescription);
            return;
        }
        current = current->next;
    }

    printf("Tâche avec l'ID %d non trouvée.\n", taskId);
}

void modifyStatus(task* tasklist, int taskId, char *newStatus) {
    task* current = tasklist;

    while (current != NULL) {
        if (current->id == taskId) {
            strcpy(current->statue,newStatus);
            return;
        }
        current = current->next;
    }

    printf("Tâche avec l'ID %d non trouvée.\n", taskId);
}


void modifyDeadline(task* tasklist, int taskId, date newDeadline) {
    task* current = tasklist;

    while (current != NULL) {
        if (current->id == taskId) {
            current->deadline = newDeadline;
            return;
        }
        current = current->next;
    }

    printf("Tâche avec l'ID %d non trouvée.\n", taskId);
}

int daysUntilDeadline(const date* deadline) {
    time_t now;
    struct tm current_time;
    time(&now);
    current_time = *localtime(&now);

    struct tm deadline_time = {0};
    deadline_time.tm_year = deadline->year - 1900;
    deadline_time.tm_mon = deadline->month - 1;
    deadline_time.tm_mday = deadline->day;

    time_t now_time_t = mktime(&current_time);
    time_t deadline_time_t = mktime(&deadline_time);

    int difference = (int)difftime(deadline_time_t, now_time_t) / (60 * 60 * 24);

    return difference;
}

void printDaysUntilDeadline(const task* tasklist) {
    const task* current = tasklist;
    
    while (current != NULL) {
        int daysRemaining = daysUntilDeadline(&(current->deadline));
        printf("Tâche ID %d - Jours restants jusqu'à la date limite : %d jours\n", current->id, daysRemaining);
        current = current->next;
    }
}


task* taskList=NULL;



int main(){
    int idtask;
    addTask(&taskList, "Task 1","a realisee" ,"Description 1", (date){22, 9, 2023});
    addTask(&taskList, "Task 2","finalisee" ,"Description 2", (date){23, 9, 2023});
    printDaysUntilDeadline(taskList);
     int choice = 0;

    do {
        printf("\nMenu :\n");
        printf("1. Ajouter une nouvelle tâche\n");
        printf("2. Ajouter plusieurs nouvelles tâches\n");
        printf("3. Afficher la liste de toutes les tâches\n");
        printf("4. Modifier une tâche\n");
        printf("5. Rechercher une tâche par identifiant\n");
        printf("6. Afficher les statistiques\n");
        printf("7. supprimer une tache\n");
        printf("0. Quitter\n");
        printf("Choisissez une option : ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addTask(&taskList,"Task 1","a realisee" ,"Description 1", (date){22, 9, 2023});
                break;
            case 2:
                //ajouterPlusieursTaches(t);
                break;
            case 3:
                task* cursor = taskList;
                while(cursor != NULL){
                    printTask(cursor);
                    cursor = cursor->next;
                }
                break;
            case 4:
                int altchoice;
                printf("1. modifier le deadline :\n");
                printf("2. modifier le status :\n");
                printf("3. modifier description :\n");
                scanf("%d",&altchoice);
                switch(altchoice){
                    case 1:
                    date newDeadline;
                    printf("donner le id du task :\n");
                    scanf("%d",&idtask);
                    printf("donner une dead line :\n");
                    scanf("%d",&newDeadline.day);
                    scanf("%d",&newDeadline.month);
                    scanf("%d",&newDeadline.year);
                        modifyDeadline(taskList,idtask,newDeadline);
                        break;
                    case 2:
                    char statue[50];
                    printf("donner le id du task :\n");
                    scanf("%d",&idtask);
                    printf("donner le nouveau statue :\n");
                    scanf("%s",statue);
                    modifyStatus(taskList, idtask,statue);
                        break;                        
                    case 3:
                    char newdescribtion[200];
                    printf("donner le id du task :\n");
                    scanf("%d",&idtask);
                    printf("donner la nouvelle description :\n");
                    scanf("%s",newdescribtion);
                    modifyDescription(taskList, idtask,newdescribtion);                    
                        break;
                    default:
                        break;                        
                }
                break;
            case 5:
                int findchoice;
                printf("1. chercher par id :\n");
                printf("2. chercher par titre :\n");
                scanf("%d",&findchoice);
                switch(findchoice){
                    case 1:
                    printf("donner le id du task :\n");
                    scanf("%d",&idtask);
                    printTask(findTaskByID(taskList,idtask));
                        break;
                    case 2:
                    char title[100];                    
                    printf("donner le titre du task :\n");
                    scanf("%d",&idtask);
                    printTask(findTaskByTitle(taskList,title));
                    
                        break;                            
                }
                break;
            case 6:
                int statschoice;
                printf("1. nombre de taches :\n");
                printf("2. nombre de tache completes et incompletes:\n");
                printf("3. nombre de jours restantes jusqu'à le delai :\n");
                scanf("%d",&statschoice);
                switch(statschoice){
                    case 1:
                        printf("\nle total : %d",countTasks( taskList));
                        break;
                    case 2:
                        printf("\nle total des taches completes: %d",complete);
                        printf("\nle total des taches incompletes: %d",incomplete);
                        break;
                    case 3:
                        printDaysUntilDeadline(taskList);
                        break;
                }
                break;
            case 7:
                int delid;
                printf("donner le id du task :\n");
                scanf("%d",&delid);
                deleteTaskByID(&taskList,delid);
                break;
            case 0:
                printf("Au revoir !\n");
                break;
            default:
                printf("Option invalide. Veuillez réessayer.\n");
        }
    } while (choice != 0);
}